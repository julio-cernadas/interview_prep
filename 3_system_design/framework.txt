++ mentioned OpenAPI / Swagger

Product architecture or design
During the product architecture or design interview, the interviewer will focus on
building a product or API at scale that supports an end user product or service.
You should be familiar with the areas below, but we're not looking for you to be an
expert in all of them. You should know enough to weight design considerations
(and understand when to consult an expert) for:
• Storage data models
• Scalability
• Design patterns
• Data ownership
• Protocols
• Data formats
• Client-server design
• Designing for long-term vs. complexity
• Accommodating possible product changes

Example product architecture or design questions
• Design a service or product API
• Design a chat service or a feed API
• Design an email server

------------------
You'll be asked product oriented questions like:
- user experience flows
- describe the APIs in details
- how to guard against spammers or bad actors
- how to design API to handle repeated requests
- still work in poor network conditions
- does system support personalization and localization
- optimally take advantage of browser and ISP caching
- what other data can we cache to save on extra requests
- what is the effect on payload size

------------------
The Product Design interview typically focuses on the more holistic parts of building a software solution and less on the back end components required.

This type of design interview will spend a significant amount of time focusing on a good API. The base expectation is that you consider the product needs and design the API to cater to the specific problem you're working on. A good design will provide a way to extend the API as the product evolves, and also be self-contained such that it is clear that some production changes might require a new API to be built.

You should be able to talk about enabling an efficient interaction between the product running on a client and the server. Do API calls require a single round trip between the client and the server or multiple round trips? If the product is latency sensitive, discuss caching and how that might help. What are the shortfalls of caching, for example, the client might need to store state on the device, which then needs to be secured and managed, or the server might need a good invalidation strategy in case the cache is inconsistent.

If you have client-side experience you should be able to talk about how you handle user interactions like scrolling, page refreshes etc. You will also want talk about how you can improve user experience by masking latency for server interactions by tweaking the client.

*It is important that the you think about how your API or product design is used. What metrics or usage experiences do you want to capture to understand how well your system is doing.

-----------------
Product Arch focusses more on the product's integration with services and how it all ties together, without emphasizing much on the core system scalability components. Let's say you're asked to build a video-only newsfeed interface, how would you build this? Would you use REST API or GraphQL for content? How would you fetch the video stream? How you THINK about the product and its users matters more here than how many server set you need to put on the backend system.

-----------------
Think APIs, data modeling, how the client and server interact, how a user may interact with it, etc. If you are currently working on a user facing product, this may be a good choice.
https://www.twine.net/blog/13-api-design-interview-questions-and-answers/

----------------
Check some current APIs

----------------
Read books, know the best practices, know security

-----------------




Notes:
- Gather functional requirements:
    * who are the users
    * what type of features

- Gather non-functional requirements:
    * focus on scale and performance
    * highly available, highly scalable, optimize for reads, etc

- Back Envelope Calculations:
    * MAU - monthly active users
    * DAU - daily active users
    * RPS - requests per second (there's roughly 100,000 seconds in day)
    * Storage - Terrabytes, Petabytes

- Make it interactive:
    * Check for feedback of the interviewer before jumping into details
    * Ask what they'd like to see first: high-level design, API design, data model

- High level design:
    * Get the end to end design down first, don't go into details yet
    * Top down approach, but stay focused on functional and non-functional requirements
        ~ APIs -> functional
        ~ Backend Systems -> non-functinonal
    * Start with Users -> APIs -> Backend Systems
    * API design
    * Data model design
        ~ Data access patterns
        ~ Read write ratio

- Deep dive design:
    * DB replication

- Wrap Up:
    * Summarize design

Notes:
- topics to review:
    * Network Protocols - TCP/IP (Transmission Control Protocol/Internet Protocol), UDP (User Datagram Protocol), FTP (File Transfer Protocol), and SMTP (Simple Mail Transport Protocol).
    * Proxies - provide an intermediary communication service between a client and an application server. Proxies are of two kinds – forward and backward.
    * Latency - the amount of time taken for a message to get delivered. It is measured in milliseconds (ms).
    * Throughput - the amount of data delivered successfully in a given period and is measured in bits per second (bps).
    * Availability - the amount of time a system remains available. It is the ratio of Uptime and Uptime + Downtime.
    * Load Balancing - used to distributing the load over multiple computing nodes.
    * Leader Election & Consensus - Leader Election Algorithm decides how a leader-less node cluster will communicate to elect the optimal leader.
    * Caching - is the process of storing copies of application data that is frequently used.
    * Sharding - the process of scaling the system horizontally by breaking up the system into smaller fragments called Shards.
    * Polling, SSE, Websockets
    * Pull Model vs Push Model
    * Queus & Pub-Sub (Message Brokers, Producers, Consumers)
    * Change Data
    * NoSQL - Cassandra
    * Aggregation Services

- APIs
    * pagination
    * GET/ POST/

- two way connection needed? -> websockets

- TCP vs UDP vs RPC:
    * TCP is suitable for applications that require reliable data transmission and error correction,
    such as web browsing, email, file transfer, and online gaming where data integrity is crucial.
    * UDP is used in scenarios where speed and low latency are more important than data reliability,
    such as streaming media, VoIP, online video gaming (for real-time updates), and DNS.
    * RPC is commonly used in distributed systems to enable communication between different components or services.
     It's useful for scenarios where code needs to be executed on a remote machine, such as in microservices architectures.

Designs to practice, categorize these:
- Facebook Newsfeed (Social Media)
    * Newsfeed
    * Status Search
    * Live Commenting
    * Proximity Server
    * Type-ahead Suggestions

- Instagram (Social Media)
    * Reels

- Twitter/Threads (Social Media)
    * Timeline

- Messenger (Consumer Chat App)

- Uber (Ride Share)

- Spotify (Music)
    * Top N Songs

- Youtube (Videos)

- TinyURL (Url Shortener)

- Pinterest (Photo Sharing)

- Web Crawler

- Ticketmaster (Events)

- Glassdoor (Jobs)

- Stack Overflow (Coding)

- LeetCode (Coding)

- AirBNB (Travel)

- Slack (Business Chat)

- Robinhood (Trading)

- Mint (Financial Management)

- Dropbox/Google Drive (Storage)

- Google Maps (GPS)

- Zoom (Video Conference)

- Amazon (E-Commerce)

- Yelp (Places)
